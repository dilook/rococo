plugins {
    id 'org.springframework.boot' version '3.5.0'
    id 'com.google.protobuf' version '0.9.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'guru.qa'
version = '0.0.1'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.flywaydb:flyway-core:${project.ext.flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${project.ext.flywayVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.grpc:spring-grpc-spring-boot-starter'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'io.grpc:grpc-services'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.grpc:spring-grpc-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${dependencyManagement.importedProperties['protobuf-java.version']}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${dependencyManagement.importedProperties['grpc.version']}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                option 'jakarta_omit'
                option '@generated=omit'
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir "../grpc-common/src"
            include '**/user.proto'
        }
    }
}

test {
    useJUnitPlatform()
}


tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

jib {
    container {
        ports = ['9094']
        jvmFlags = ["-Dspring.profiles.active=${System.env.PROFILE}"]
        environment = ['TZ': 'Europe/Moscow']
        creationTime = 'USE_CURRENT_TIMESTAMP'
        labels = [
                'maintainer': 'Usoltsev Denis @dilook',
                'version'   : "${project.version}".toString()
        ]
    }
    from {
        image = "${project.ext.dockerImage}"
        platforms {
            platform {
                architecture = "${project.ext.dockerArch}"
                os = 'linux'
            }
        }
    }
    to {
        image = "${project.ext.dockerHubName}/${project.name}-${System.env.PROFILE}"
        tags = ['latest', "${project.version}"]
    }
}

tasks.jib.dependsOn test
tasks.jibDockerBuild.dependsOn test